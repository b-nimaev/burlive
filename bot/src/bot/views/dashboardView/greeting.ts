import { ExtraEditMessageText } from "telegraf/typings/telegram-types";
import { IUser, User } from "../../../models/IUser";
import rlhubContext from "../../models/rlhubContext";
import format_money from "../../utlis/format_money";
import { ConfirmedTranslations, translation } from "../../../models/ISentence";

export default async function greeting(ctx: rlhubContext) {
  try {
    const extra: ExtraEditMessageText = {
      parse_mode: "HTML",
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: "–û –ø—Ä–æ–µ–∫—Ç–µ",
              callback_data: "about",
            },
          ],
          [
            {
              text: "–ú–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è",
              callback_data: "messages",
            },
          ],
          // [
          //   {
          //     text: "üí∏ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞",
          //     callback_data: "help",
          //   },
          // ],
          [
            {
              text: "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
              callback_data: "common_settings",
            },
          ],
          [
            {
              text: "–°–ø—Ä–∞–≤–æ—á–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã",
              callback_data: "reference_materials",
            },
          ],
          [
            {
              text: "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞",
              callback_data: "referral",
            },
          ],
          [
            {
              text: "–ù–∞–∑–∞–¥",
              callback_data: "home",
            },
            {
              text: "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å",
              url: "https://t.me/bur_live",
            },
          ],
        ],
      },
    };

    const message = `<b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b> \n\n`;

    ctx.updateType === "message" ? await ctx.reply(message, extra) : false;
    if (ctx.update.callback_query.message.text === "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç" && ctx.updateType === 'callback_query') {
      ctx.answerCbQuery()
      // return next()
      return false;
    }

    ctx.updateType === "callback_query"
      ? await ctx.editMessageText(message, extra)
      : false;
  } catch (err) {
    console.error(err);
  }
}
