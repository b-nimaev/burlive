import { Composer, Scenes } from "telegraf";
import { ExtraEditMessageText } from "telegraf/typings/telegram-types";
import rlhubContext from "../models/rlhubContext";
import createPayment from "../utlis/yookassa";
const handler = new Composer<rlhubContext>();
const premium = new Scenes.WizardScene(
  "premium",
  async (ctx: rlhubContext, next) => subscribe_section_handler(ctx, next),
  handler
);

export async function subscribe_section(ctx: rlhubContext) {
  try {
    let message: string = `<b>üíé –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞</b> \n\n`;
    message += `–†–∞—Å—à–∏—Ä—è–π—Ç–µ —Å–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏. –ü–æ–¥–¥–µ—Ä–∂–∏—Ç–µ –±—É—Ä—è—Ç—Å–∫–∏–π —è–∑—ã–∫. –ü–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º. \n\n`;

    const extra: ExtraEditMessageText = {
      parse_mode: "HTML",
      reply_markup: {
        inline_keyboard: [
          [{ text: "1 –º–µ—Å—è—Ü / 199 ‚ÇΩ", callback_data: "rub 199" }],
          [{ text: "6 –º–µ—Å—è—Ü–µ–≤ / 837 ‚ÇΩ", callback_data: "rub 837" }],
          [{ text: "12 –º–µ—Å—è—Ü–µ–≤ / 1436 ‚ÇΩ", callback_data: "rub 1436" }],
          [
            {
              text: "–ù–∞–∑–∞–¥",
              callback_data: "back",
            },
          ],
        ],
      },
    };

    if (ctx.updateType === "callback_query") {
      await ctx.editMessageText(message, extra);
    } else {
      await ctx.reply(message, extra);
    }
  } catch (err) {
    console.log(err);
  }
}
async function subscribe_section_handler(ctx: rlhubContext, next: any) {
  try {
    const data = ctx.update.callback_query.data;

    if (data === "back") {
      await ctx.scene.enter("premium");
    }

    ctx.answerCbQuery();
  } catch (error) {}
}

premium.action("rub 199", async (ctx) => {
  const returnUrl = `https://t.me/burlive_bot`;
  const description = `–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–µ—Ä–≤–∏—Å –ø–æ –∏–∑—É—á–µ–Ω–∏—é –∏ —Ä–∞–∑–≤–∏—Ç–∏—é –±—É—Ä—è—Ç—Å–∫–æ–≥–æ —è–∑—ã–∫–∞`;
  const amount = `199.00`;
  try {
    const payment = await createPayment(ctx, amount, description, returnUrl);
    const confirmationUrl = payment.confirmation.confirmation_url;
    await ctx.answerCbQuery("–°—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω");
    await ctx.reply(
      `–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: ${confirmationUrl}`
    );
  } catch (error) {
    console.error(error);
    ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    );
  }
});
premium.action("rub 837", async (ctx) => {
  const returnUrl = `https://t.me/burlive_bot`;
  const description = `–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–µ—Ä–≤–∏—Å –ø–æ –∏–∑—É—á–µ–Ω–∏—é –∏ —Ä–∞–∑–≤–∏—Ç–∏—é –±—É—Ä—è—Ç—Å–∫–æ–≥–æ —è–∑—ã–∫–∞`;
  const amount = `837.00`;
  try {
    const payment = await createPayment(ctx, amount, description, returnUrl);
    const confirmationUrl = payment.confirmation.confirmation_url;
    await ctx.answerCbQuery("–°—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω");
    await ctx.reply(
      `–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: ${confirmationUrl}`
    );
  } catch (error) {
    console.error(error);
    ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    );
  }
});
premium.action("rub 1436", async (ctx) => {
  const returnUrl = `https://t.me/burlive_bot`;
  const description = `–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–µ—Ä–≤–∏—Å –ø–æ –∏–∑—É—á–µ–Ω–∏—é –∏ —Ä–∞–∑–≤–∏—Ç–∏—é –±—É—Ä—è—Ç—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ \n–°—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏: 12 –º–µ—Å—è—Ü–µ–≤`;
  const amount = `1436.00`;
  try {
    const payment = await createPayment(ctx, amount, description, returnUrl);
    const confirmationUrl = payment.confirmation.confirmation_url;
    await ctx.answerCbQuery("–°—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω");
    await ctx.reply(
      `–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: ${confirmationUrl}`
    );
  } catch (error) {
    console.error(error);
    ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    );
  }
});
premium.action("back", async (ctx) => ctx.scene.enter("home"))
premium.enter(async (ctx: rlhubContext) => {
  try {
    // await saveSceneMiddleware(ctx);
    await subscribe_section(ctx);
  } catch (error) {
    console.log(error);
    await ctx.reply("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
  }
});

premium.on("message", async (ctx: rlhubContext, next) => {
  const message = ctx.update.message.text;

  if (message === "/premium") {
    return await subscribe_section(ctx);
  }

  if (message === "/start") {
    return await ctx.scene.enter("premium");
  }

  if (message === "/home") {
    return await ctx.scene.enter("home");
  }

  if (message === "/sentences") {
    return await ctx.scene.enter("sentences");
  }

  if (message === "/dictionary") {
    return await ctx.scene.enter("vocabular");
  }

  await subscribe_section(ctx);
});

premium.action(/.*/, async (ctx: rlhubContext, next) => {
  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ü–µ–Ω—ã
  console.log("Current scene: " + ctx.scene.current?.id);

  // –í–∞—à –∫–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –Ω—É–∂–Ω—É—é —Å—Ü–µ–Ω—É
  const actionData = ctx.update.callback_query.data;
  console.log(`handled action: ${actionData}`);

  // –ù–∞–ø—Ä–∏–º–µ—Ä, –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ actionData –∏ –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å—Ü–µ–Ω—ã
  // if (actionData === 'to_premium') {
  // await ctx.scene.enter('premium');
  // } else if (actionData === 'to_chat') {
  // await ctx.scene.enter('chat');
  // } else {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
  // }

  // –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  await ctx.answerCbQuery();
  await subscribe_section(ctx);
});
// premium.on("message", async (ctx) => await render_premium_section(ctx));

export default premium;
