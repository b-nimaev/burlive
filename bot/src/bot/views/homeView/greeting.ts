import { InlineKeyboardMarkup } from "telegraf/typings/core/types/typegram";
import { bot } from "../../..";
import rlhubContext from "../../models/rlhubContext";
import { loginBurlive } from "../home.scene";
import { ExtraEditMessageText } from "telegraf/typings/telegram-types";
import userIsExists from "../../utlis/userIsExists";

export async function home_greeting(ctx: rlhubContext, next?: any, enter?: boolean) {
  try {

    let refererID: string | number = ctx.startPayload    

    if (refererID) {
      refererID = refererID.replace("ref_", "")
      refererID = Number(refererID);
      const isExists = await userIsExists(ctx, refererID)
      if (!isExists) {
        ctx.reply("–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –±–∏—Ç–∞—è")
      }
    }

    const data = await loginBurlive();

    const response = await fetch(
      `${process.env.api_url}/telegram/user/is-exists/${ctx.from.id}`,
      {
        method: "get",
        headers: {
          "Content-Type": "appliscation/json",
          Authorization: `Bearer ${data.token}`,
        },
      }
    );
    const query = await response.json();

    console.log(`–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...`);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–≤–µ—Ç–∞
    if (!response.ok) {
      console.error("Response not OK:", response.status, response.statusText);
      throw new Error(query);
    }

    console.log(
      "–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    );

    const chatMember = await bot.telegram.getChatMember(
      process.env.telegram_channel_username,
      ctx.from.id
    );
    const isMember =
      chatMember.status !== "left" && chatMember.status !== "kicked";

    console.log(
      `–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª ${process.env.telegram_channel_username}`
    );

    if (!isMember) {
      await ctx.reply(
        `–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã ${process.env.telegram_channel_link}`,
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è",
                  url: process.env.telegram_channel_link,
                },
                {
                  text: "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                  callback_data: "check_subscription",
                },
              ],
            ],
          },
        }
      );

      if (next) {
        return next();
      } else {
        return true;
      }

    }

    console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª");

    if (!query.is_exists) {
      ctx.reply("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ!");
      const createUser = await fetch(
        `${process.env.api_url}/telegram/create-user`,
        {
          method: "post",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${data.token}`,
          },
          body: JSON.stringify(ctx.from),
        }
      );
      const createUserParse = await createUser.json();
      console.log(createUserParse);
      await ctx.reply("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!");
      await render_home_section(ctx, true);
    } else {
      // console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–¥");
      await render_home_section(ctx)
    }

    if (enter) {
      console.log(ctx.scene)
      // @ts-ignore
      ctx.scene.leave(ctx.scene.current.id)
      ctx.scene.enter("home")
    }

    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
  } catch (err) {
    console.error("Error in home.start:", err);
  }
}

export async function render_home_section(ctx: rlhubContext, reply?: boolean) {
  try {
    const message = `–°–∞–º–æ—É—á–∏—Ç–µ–ª—å –±—É—Ä—è—Ç—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ \n\n–ö–∞–∂–¥–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º, \n–≤–ª–∏—è–µ—Ç –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –¥–∞–ª—å–Ω–µ–π—à–µ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ <b>–ë—É—Ä—è—Ç—Å–∫–æ–≥–æ —è–∑—ã–∫–∞</b> \n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª, —á—Ç–æ–±—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å`;
    const keyboard: InlineKeyboardMarkup = {
      inline_keyboard: [
        [
          { text: "–°–∞–º–æ—É—á–∏—Ç–µ–ª—å", callback_data: "study" },
          { text: "–°–ª–æ–≤–∞—Ä—å", callback_data: "vocabular" },
        ],
        [{ text: "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", callback_data: "sentences" }],
        [{ text: "üíé –ü—Ä–µ–º–∏—É–º", callback_data: "to_subscribe" }],
        [{ text: "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data: "dashboard" }],
      ],
    };

    const extra: ExtraEditMessageText = {
      parse_mode: "HTML",
      reply_markup: keyboard,
    };

    if (reply) {
      await ctx.reply(message, extra);
    } else {
      ctx.updateType === "callback_query"
        ? await ctx.editMessageText(message, extra)
        : await ctx.reply(message, extra);
    }

  } catch (error) {
    console.error(`Error on render home section`, error);
  }
}
