import { Composer, Scenes } from "telegraf";
import { ExtraEditMessageText } from "telegraf/typings/telegram-types";
import { ISentence, Sentence } from "../../models/ISentence";
import { IUser, User } from "../../models/IUser";
import rlhubContext from "../models/rlhubContext";
import { home_greeting, render_home_section } from "./homeView/greeting";
import { bot } from "../..";
import createPayment from "../utlis/yookassa";
import { saveSceneMiddleware } from "../utlis/saveSceneMiddleware";
const handler = new Composer<rlhubContext>();
const home = new Scenes.WizardScene(
  "home",
  handler,
  async (ctx: rlhubContext, next) => subscribe_section_handler(ctx, next)
);

export async function loginBurlive() {
  try {
    const response = await fetch(`${process.env.api_url}/users/login`, {
      method: "post",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        password: process.env.telegram_user_password,
        email: process.env.telegram_user_email,
        username: process.env.telegram_user_username,
      }),
    });

    const text = await response.text(); // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞

    const data = JSON.parse(text); // –ó–∞—Ç–µ–º –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
    if (!response.ok) {
      throw new Error(data.message || "Login failed");
    }

    return data;
  } catch (error) {
    console.error("Error in loginBurlive:", error);
    throw error; // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–æ—Å –æ—à–∏–±–∫–∏, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –µ—ë –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
  }
}

// home.start(async (ctx: rlhubContext, next) => await home_greeting(ctx, next));

home.action("check_subscription", async (ctx) => {
  const userId = ctx.from.id;

  try {
    const chatMember = await bot.telegram.getChatMember(
      process.env.telegram_channel_username,
      userId
    );
    const isMember =
      chatMember.status !== "left" && chatMember.status !== "kicked";

    if (isMember) {
      ctx.answerCbQuery("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! \n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.");
      ctx.editMessageText("–ù–∞—á–∞–ª–æ");
    } else {
      await ctx.deleteMessage();
      await ctx.reply(
        `–í—ã –≤—Å–µ –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã ${process.env.telegram_channel_link}`,
        {
          reply_markup: {
            inline_keyboard: [
              [
                { text: "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url: process.env.telegram_channel_link },
                {
                  text: "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                  callback_data: "check_subscription",
                },
              ],
            ],
          },
        }
      );
    }
  } catch (error) {
    console.error(error);
    ctx.reply("An error occurred while checking the subscription status.");
  }
});

home.action("vocabular", async (ctx, next) => {
  console.log("–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–ª–æ–≤–∞—Ä—å");
  ctx.answerCbQuery();
  await ctx.scene.enter("vocabular");
  await saveSceneMiddleware(ctx, next, true);
});

home.action("sentences", async (ctx) => {
  return ctx.scene.enter("sentences");
});

home.action("to_subscribe", async (ctx) => {
  await ctx.answerCbQuery();
  await subscribe_section(ctx);
  // return ctx.scene.enter("sentences");
});

home.action("translater", async (ctx) => {
  let message: string = `<b>–ü–ª–∞–Ω –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é –ë—É—Ä—è—Ç—Å–∫–æ–≥–æ —è–∑—ã–∫–∞</b> \n\n`;
  message += `<a href="https://telegra.ph/Znachimost-Mashinnogo-Perevodchika-dlya-Buryatskogo-YAzyka-09-01">–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–∞—à–∏–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ —Å –ë—É—Ä—è—Ç—Å–∫–æ–≥–æ —è–∑—ã–∫–∞, –Ω–∞–¥ —á–µ–º –º—ã –∏ —Ä–∞–±–æ—Ç–∞–µ–º</a>\n`;

  await ctx.editMessageText(message, {
    parse_mode: "HTML",
    disable_web_page_preview: true,
  });

  await render_home_section(ctx, true);
  return ctx.answerCbQuery("–ù–∞ —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ üéØ");
});

export async function subscribe_section(ctx: rlhubContext) {
  try {
    let message: string = `<b>üíé –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞</b> \n\n`;
    message += `–†–∞—Å—à–∏—Ä—è–π—Ç–µ —Å–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏. –ü–æ–¥–¥–µ—Ä–∂–∏—Ç–µ –±—É—Ä—è—Ç—Å–∫–∏–π —è–∑—ã–∫. –ü–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º. \n\n`;

    const extra: ExtraEditMessageText = {
      parse_mode: "HTML",
      reply_markup: {
        inline_keyboard: [
          [{ text: "1 –º–µ—Å—è—Ü / 199 ‚ÇΩ", callback_data: "rub 199" }],
          [{ text: "6 –º–µ—Å—è—Ü–µ–≤ / 837 ‚ÇΩ", callback_data: "rub 837" }],
          [{ text: "12 –º–µ—Å—è—Ü–µ–≤ / 1436 ‚ÇΩ", callback_data: "rub 1436" }],
          [
            {
              text: "–ù–∞–∑–∞–¥",
              callback_data: "back",
            },
          ],
        ],
      },
    };

    if (ctx.updateType === "callback_query") {
      await ctx.editMessageText(message, extra);
    } else {
      await ctx.reply(message, extra);
    }

    ctx.wizard.selectStep(1);
  } catch (err) {
    console.log(err);
  }
}
async function subscribe_section_handler(ctx: rlhubContext, next: any) {
  try {
    const data = ctx.update.callback_query.data;
    if (data === "back") {
      await render_home_section(ctx);
    }
    ctx.answerCbQuery();
  } catch (error) {}
}

// –¢–æ–∫–µ–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø–ª–∞—Ç–µ–∂–µ–π –æ—Ç –ÆKassa
const providerToken = process.env.PROVIDER_TOKEN;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—á–µ—Ç–∞
async function sendInvoice(ctx: rlhubContext) {
  try {
    const invoice = {
      chat_id: ctx.chat.id,
      provider_token: providerToken,
      start_parameter: "start",
      title: "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–µ—Ä–≤–∏—Å",
      description: "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π Burlive –Ω–∞ 1 –º–µ—Å—è—Ü",
      currency: "RUB",
      prices: [{ label: "–ü–æ–¥–ø–∏—Å–∫–∞", amount: 19900 }], // 19900 –∫–æ–ø–µ–µ–∫ = 199 —Ä—É–±–ª–µ–π
      payload: JSON.stringify({ unique_id: `${ctx.from.id}_${Date.now()}` }),
      need_phone_number: true,
      need_email: true,
    };
    await ctx.deleteMessage();
    await ctx.replyWithInvoice(invoice);
  } catch (error) {
    console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—á–µ—Ç–∞:", error);
    ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞.");
  }
}

home.action("rub 199", async (ctx) => {
  const returnUrl = `https://burlive.ru/backendapi/telegram/success-payment/${ctx.from.id}`;
  const description = `–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–µ—Ä–≤–∏—Å –ø–æ –∏–∑—É—á–µ–Ω–∏—é –∏ —Ä–∞–∑–≤–∏—Ç–∏—é –±—É—Ä—è—Ç—Å–∫–æ–≥–æ —è–∑—ã–∫–∞`;
  const amount = `199.00`;
  try {
    const payment = await createPayment(ctx, amount, description, returnUrl);
    const confirmationUrl = payment.confirmation.confirmation_url;
    await ctx.answerCbQuery("–°—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω");
    await ctx.reply(
      `–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: ${confirmationUrl}`
    );
  } catch (error) {
    console.error(error);
    ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    );
  }
});
home.action("rub 837", async (ctx) => {
  const returnUrl = `https://burlive.ru/backendapi/telegram/success-payment/${ctx.from.id}`;
  const description = `–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–µ—Ä–≤–∏—Å –ø–æ –∏–∑—É—á–µ–Ω–∏—é –∏ —Ä–∞–∑–≤–∏—Ç–∏—é –±—É—Ä—è—Ç—Å–∫–æ–≥–æ —è–∑—ã–∫–∞`;
  const amount = `837.00`;
  try {
    const payment = await createPayment(ctx, amount, description, returnUrl);
    const confirmationUrl = payment.confirmation.confirmation_url;
    await ctx.answerCbQuery("–°—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω");
    await ctx.reply(
      `–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: ${confirmationUrl}`
    );
  } catch (error) {
    console.error(error);
    ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    );
  }
});
home.action("rub 1436", async (ctx) => {
  const returnUrl = `https://burlive.ru/backendapi/telegram/success-payment/${ctx.from.id}`;
  const description = `–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–µ—Ä–≤–∏—Å –ø–æ –∏–∑—É—á–µ–Ω–∏—é –∏ —Ä–∞–∑–≤–∏—Ç–∏—é –±—É—Ä—è—Ç—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ \n–°—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏: 12 –º–µ—Å—è—Ü–µ–≤`;
  const amount = `1436.00`;
  try {
    const payment = await createPayment(ctx, amount, description, returnUrl);
    const confirmationUrl = payment.confirmation.confirmation_url;
    await ctx.answerCbQuery("–°—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω");
    await ctx.reply(
      `–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: ${confirmationUrl}`
    );
  } catch (error) {
    console.error(error);
    ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    );
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ PreCheckoutQuery
home.on("pre_checkout_query", (ctx) => {
  ctx.answerPreCheckoutQuery(true);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ SuccessfulPayment
home.on("successful_payment", async (ctx) => {
  console.log("–£—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂:", ctx.message.successful_payment);
  const payment = ctx.message.successful_payment;

  // –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ provider_payment_charge_id –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
  const providerPaymentChargeId = payment.provider_payment_charge_id;
  console.log(payment);
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
  await ctx.reply("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.");
  await render_home_section(ctx, true);
});

home.action("study", async (ctx) => {
  // console.log('study')
  ctx.scene.enter("study");
  // return ctx.answerCbQuery('–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ üéØ')
});

async function delay(ms: number) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}

home.action("chatgpt", async (ctx) => {
  ctx.answerCbQuery();
  return ctx.scene.enter("chatgpt");
});

home.action("dashboard", async (ctx: rlhubContext, next) => {
  await ctx.answerCbQuery("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç");
  await ctx.scene.enter("dashboard", next);
});

home.enter(async (ctx: rlhubContext) => {
  try {
    // await saveSceneMiddleware(ctx);
    await render_home_section(ctx);
  } catch (error) {
    console.log(error);
    await ctx.reply("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
  }
});

home.command("add_sentences", async (ctx) => {
  await ctx.reply(
    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏—Ö –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º"
  );
  ctx.wizard.selectStep(1);
});

home.command("reset_activet", async (ctx) => {
  await Sentence.updateMany({
    active_translator: [],
  });
});

handler.on("message", async (ctx: rlhubContext, next) => {
  const message = ctx.update.message.text;

  if (message === "/premium") {
    return next();
  }
  if (message === "/dictionary") {
    return next();
  }
  if (message === "/webapp") {
    return next();
  }

  await render_home_section(ctx);
});

home.action(/.*/, async (ctx: rlhubContext, next) => {
  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ü–µ–Ω—ã
  console.log("Current scene: " + ctx.scene.current?.id);

  // –í–∞—à –∫–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –Ω—É–∂–Ω—É—é —Å—Ü–µ–Ω—É
  const actionData = ctx.update.callback_query.data;
  console.log(`handled action: ${actionData}`);

  // –ù–∞–ø—Ä–∏–º–µ—Ä, –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ actionData –∏ –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å—Ü–µ–Ω—ã
  // if (actionData === 'to_home') {
  // await ctx.scene.enter('home');
  // } else if (actionData === 'to_chat') {
  // await ctx.scene.enter('chat');
  // } else {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
  // }

  // –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  await ctx.answerCbQuery();
  await render_home_section(ctx);
});
// home.on("message", async (ctx) => await render_home_section(ctx));

export default home;
