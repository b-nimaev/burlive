import { Composer, Scenes } from "telegraf";
import { ExtraEditMessageText } from "telegraf/typings/telegram-types";
import { ISentence, Sentence } from "../../models/ISentence";
import { IUser, User } from "../../models/IUser";
import rlhubContext from "../models/rlhubContext";
import { home_greeting, render_home_section } from "./homeView/greeting";
import { bot } from "../..";
const handler = new Composer<rlhubContext>();
const home = new Scenes.WizardScene("home", handler);

export async function greeting(ctx: rlhubContext, reply?: boolean) {
  let user: IUser | null = await User.findOne({ id: ctx.from?.id });

  if (user) {
    if (user.interface_language) {
      ctx.scene.session.interface_ln = user.interface_language;
    } else {
      ctx.scene.session.interface_ln = "russian";
    }
  }

  let keyboard_translates: any = {
    learns: {
      russian: "–°–∞–º–æ—É—á–∏—Ç–µ–ª—å",
      english: "Learns",
      buryat: "–ó–∞–∞–±–∞—Ä–∏",
    },
    dictionary: {
      russian: "–°–ª–æ–≤–∞—Ä—å",
      english: "Dictionary",
      buryat: "–¢–æ–ª–∏",
    },
    sentences: {
      russian: "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è",
      english: "Sentences",
      buryat: "–ú—ç–¥—É—É–ª—ç–ª–Ω—É–¥",
    },
    translator: {
      russian: "–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫",
      english: "Translator",
      buryat: "–û—Ä—à—É—É–ª–≥–∞—Ä–∏",
    },
    moderation: {
      russian: "–ú–æ–¥–µ—Ä–∞—Ü–∏—è",
      english: "Moderation",
      buryat: "–ó–æ—Ö–∏—Å—É—É–ª–∞–ª",
    },
    dashboard: {
      russian: "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç",
      english: "Dashboard",
      buryat: "–û–æ—Ä—ã–Ω —Ç–∞ha–≥",
    },
  };

  const extra: ExtraEditMessageText = {
    parse_mode: "HTML",
    reply_markup: {
      inline_keyboard: [
        [
          {
            text: keyboard_translates.learns[ctx.scene.session.interface_ln],
            callback_data: "study",
          },
          {
            text: keyboard_translates.dictionary[
              ctx.scene.session.interface_ln
            ],
            callback_data: "vocabular",
          },
        ],
        [
          {
            text: keyboard_translates.sentences[ctx.scene.session.interface_ln],
            callback_data: "sentences",
          },
        ],
        [
          {
            text: keyboard_translates.translator[
              ctx.scene.session.interface_ln
            ],
            callback_data: "translater",
          },
        ],
        [
          {
            text: keyboard_translates.moderation[
              ctx.scene.session.interface_ln
            ],
            callback_data: "moderation",
          },
        ],
        [{ text: "üîì Chat GPT", callback_data: "chatgpt" }],
        // [{ text: "üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data: "table" }],
        [
          {
            text: keyboard_translates.dashboard[ctx.scene.session.interface_ln],
            callback_data: "dashboard",
          },
        ],
      ],
    },
  };

  let message: any = {
    russian: `–°–∞–º–æ—É—á–∏—Ç–µ–ª—å –±—É—Ä—è—Ç—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ \n\n–ö–∞–∂–¥–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º, \n–≤–ª–∏—è–µ—Ç –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –¥–∞–ª—å–Ω–µ–π—à–µ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ <b>–ë—É—Ä—è—Ç—Å–∫–æ–≥–æ —è–∑—ã–∫–∞</b> \n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª, —á—Ç–æ–±—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å`,
    buryat: `–ë—É—Ä—è–¥ —Ö—ç–ª—ç–Ω—ç –∑–∞–∞–±–∞—Ä–∏ \n\n–ö–∞–∂–¥–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º, \n–≤–ª–∏—è–µ—Ç –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –¥–∞–ª—å–Ω–µ–π—à–µ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ <b>–ë—É—Ä—è—Ç—Å–∫–æ–≥–æ —è–∑—ã–∫–∞</b> \n\n–≠—Ö–∏–ª—Ö–∏–∏–Ω, –Ω—ç–≥—ç —é—É–º—ç –¥–∞—Ä–∞–≥—Ç—ã`,
    english: `Buryat Language Tutorial \n\nEvery interaction with the bot affects the preservation and further development of the Buryat language \n\nChoose a section to start`,
  };

  try {
    if (reply) {
      return ctx.reply(message[ctx.scene.session.interface_ln], extra);
    }

    // ctx.updateType === 'message' ? await ctx.reply(message, extra) : false
    ctx.updateType === "callback_query"
      ? await ctx.editMessageText(
          message[ctx.scene.session.interface_ln],
          extra
        )
      : ctx.reply(message[ctx.scene.session.interface_ln], extra);
  } catch (err) {
    console.log(err);
  }
}

export async function loginBurlive() {
  try {
    const response = await fetch(`${process.env.api_url}/users/login`, {
      method: "post",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        password: process.env.telegram_user_password,
        email: process.env.telegram_user_email,
        username: process.env.telegram_user_username,
      }),
    });

    const text = await response.text(); // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
    console.log("Response Text:", text);

    const data = JSON.parse(text); // –ó–∞—Ç–µ–º –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
    if (!response.ok) {
      throw new Error(data.message || "Login failed");
    }

    return data;
  } catch (error) {
    console.error("Error in loginBurlive:", error);
    throw error; // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–æ—Å –æ—à–∏–±–∫–∏, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –µ—ë –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
  }
}

home.start(async (ctx: rlhubContext) => await home_greeting(ctx));

home.action("check_subscription", async (ctx) => {
  const userId = ctx.from.id;

  try {
    const chatMember = await bot.telegram.getChatMember(
      process.env.telegram_channel_username,
      userId
    );
    const isMember =
      chatMember.status !== "left" && chatMember.status !== "kicked";

    if (isMember) {
      ctx.answerCbQuery("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! \n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.");
      ctx.editMessageText("–ù–∞—á–∞–ª–æ");
    } else {
      await ctx.deleteMessage();
      await ctx.reply(
        `–í—ã –≤—Å–µ –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã ${process.env.telegram_channel_link}`,
        {
          reply_markup: {
            inline_keyboard: [
              [
                { text: "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url: process.env.telegram_channel_link },
                {
                  text: "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                  callback_data: "check_subscription",
                },
              ],
            ],
          },
        }
      );
    }
  } catch (error) {
    console.error(error);
    ctx.reply("An error occurred while checking the subscription status.");
  }
});

home.action("vocabular", async (ctx) => {
    console.log("–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–ª–æ–≤–∞—Ä—å")
  ctx.answerCbQuery();
  return ctx.scene.enter("vocabular");
});

home.action("sentences", async (ctx) => {
  return ctx.scene.enter("sentences");
});

home.action("translater", async (ctx) => {
  let message: string = `<b>–ü–ª–∞–Ω –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é –ë—É—Ä—è—Ç—Å–∫–æ–≥–æ —è–∑—ã–∫–∞</b> \n\n`;
  message += `<a href="https://telegra.ph/Znachimost-Mashinnogo-Perevodchika-dlya-Buryatskogo-YAzyka-09-01">–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–∞—à–∏–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ —Å –ë—É—Ä—è—Ç—Å–∫–æ–≥–æ —è–∑—ã–∫–∞, –Ω–∞–¥ —á–µ–º –º—ã –∏ —Ä–∞–±–æ—Ç–∞–µ–º</a>\n`;

  await ctx.editMessageText(message, {
    parse_mode: "HTML",
    disable_web_page_preview: true,
  });
  await greeting(ctx, true);
  return ctx.answerCbQuery("–ù–∞ —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ üéØ");
});

home.action("study", async (ctx) => {
  // console.log('study')
  ctx.scene.enter("study");
  // return ctx.answerCbQuery('–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ üéØ')
});

async function delay(ms: number) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}

home.action("chatgpt", async (ctx) => {
  ctx.answerCbQuery();
  return ctx.scene.enter("chatgpt");
});

home.action("dashboard", async (ctx) => {
  await ctx.answerCbQuery("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç");
  return ctx.scene.enter("dashboard");
});

home.enter(async (ctx) => {
 await render_home_section(ctx);
});

home.command("add_sentences", async (ctx) => {
  await ctx.reply(
    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏—Ö –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º"
  );
  ctx.wizard.selectStep(1);
});

home.command("reset_activet", async (ctx) => {
  await Sentence.updateMany({
    active_translator: [],
  });
});

export default home;
